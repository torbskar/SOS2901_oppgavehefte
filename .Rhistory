mutate(r_squared = 1 - res_pred/res_y)
kom_pred2
mutate(res_y = y - mean(y))
kom_pred2
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - res_pred/residual_total)
kom_pred2
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet))
kom_pred2  %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet))
kom_pred2  %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - res_pred/residual_total)
kom_pred2
kom_pred2 <- kommune_test %>%
mutate(pred = predict(step_mod), newdata = kommune_test,
residual = pred - voldskriminalitet)
kom_pred2  %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2))
kom_pred2  %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - SSres/SStot)
summary(step_mod)$r.squared
library(rsample)
set.seed(42)
kommune_split <- initial_split(kommune, prop = .7)
kommune_train <- training(kommune_split)
kommune_test <- testing(kommune_split)
kom_pred2 <- kommune_test %>%
mutate(pred = predict(step_mod), newdata = kommune_test,
residual = pred - voldskriminalitet)
kom_pred2 <- kommune_test %>%
mutate(pred = predict(step_mod), newdata = kommune_test,
residual = pred - voldskriminalitet)
?predict
?predict.lm
kom_pred2 <- kommune_test %>%
mutate(pred = predict(step_mod), newdata = kommune_test)
kom_pred2 <- kommune_test %>%
mutate(pred = predict(step_mod, newdata = kommune_test))
kom_pred2 <- kommune_test %>%
mutate(pred = predict(step_mod, newdata = kommune_test),
residual = pred - voldskriminalitet)
ggplot(kom_pred2, aes(x = voldskriminalitet, y = pred)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm", se = FALSE)
kom_pred2  %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - SSres/SStot)
kom_pred2 <- kommune_test %>%
mutate(pred = predict(step_mod, newdata = kommune_test),
residual = pred - voldskriminalitet)
kom_pred2  %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - SSres/SStot)
kom_pred2  %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - (SSres/SStot))
kom_pred2 <- kommune_test %>%
mutate(pred = predict(step_mod, newdata = kommune_test),
residual = pred - voldskriminalitet)
kom_pred2 <- kommune_test %>%
mutate(pred = predict(step_mod, newdata = kommune_test),
residual = pred - voldskriminalitet)
ggplot(kom_pred2, aes(x = voldskriminalitet, y = pred)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm", se = FALSE)
kom_pred2 <- kommune_test %>%
mutate(pred = predict(step_mod, newdata = .),
residual = pred - voldskriminalitet)
ggplot(kom_pred2, aes(x = voldskriminalitet, y = pred)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm", se = FALSE)
kom_pred2 %>%
mutate(sq.resid = residual^2) %>%
summarise(sqrt(mean(sq.resid)))
kom_pred2 <- kommune_test %>%
mutate(pred = predict(full_mod2, newdata = .),
residual = pred - voldskriminalitet)
ggplot(kom_pred2, aes(x = voldskriminalitet, y = pred)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm", se = FALSE)
kom_pred2 <- kommune_test %>%
mutate(pred = predict(step_mod, newdata = .),
residual = pred - voldskriminalitet)
ggplot(kom_pred2, aes(x = voldskriminalitet, y = pred)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm", se = FALSE)
full_mod
kom_pred3 <- kommune_test %>%
mutate(pred = predict(full_mod, newdata = .),
residual = pred - voldskriminalitet)
ggplot(kom_pred3, aes(x = voldskriminalitet, y = pred)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm", se = FALSE)
kom_pred3  %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - (SSres/SStot))
summary(full_mod)
kom_pred3 <- kommune_test %>%
mutate(pred = predict(full_mod2, newdata = .),
residual = pred - voldskriminalitet)
ggplot(kom_pred3, aes(x = voldskriminalitet, y = pred)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm", se = FALSE)
kom_pred3 <- kommune_test %>%
mutate(pred = predict(full_mod, newdata = .),
residual = pred - voldskriminalitet)
ggplot(kom_pred3, aes(x = voldskriminalitet, y = pred)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm", se = FALSE)
kom_pred3  %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - (SSres/SStot))
kom_pred3 %>%
mutate(sq.resid = residual^2) %>%
summarise(sqrt(mean(sq.resid)))
kom_pred2 <- kom_pred2 %>%
filter(pred > 100)
kom_pred2 <- kom_pred2 %>%
filter(pred < 100)
ggplot(kom_pred2, aes(x = voldskriminalitet, y = pred)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm", se = FALSE)
kom_pred2 <- kommune_test %>%
mutate(pred = predict(step_mod, newdata = .),
residual = pred - voldskriminalitet)
ggplot(kom_pred2, aes(x = voldskriminalitet, y = pred)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm", se = FALSE)
summary(kom_pred2$pred)
kom_pred2 <- kom_pred2 %>%
filter(pred < 1000)
ggplot(kom_pred2, aes(x = voldskriminalitet, y = pred)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm", se = FALSE)
kom_pred3 <- kommune_test %>%
mutate(pred = predict(full_mod, newdata = .),
residual = pred - voldskriminalitet)
kom_s %>%
mutate(pred = predict(step_mod),
residual = pred - voldskriminalitet) %>%
mutate(sq.resid = residual^2) %>%
summarise(sqrt(mean(sq.resid)))
kom_pred2  %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - (SSres/SStot))
kom_pred2 <- kom_pred2 %>%
filter(pred < 200)
ggplot(kom_pred2, aes(x = voldskriminalitet, y = pred)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm", se = FALSE)
kom_pred2 <- kom_pred2 %>%
filter( abs(pred) < 200)
ggplot(kom_pred2, aes(x = voldskriminalitet, y = pred)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm", se = FALSE)
kom_pred2  %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - (SSres/SStot))
kom_pred2 <- kom_pred2 %>%
filter( abs(pred) < 50)
ggplot(kom_pred2, aes(x = voldskriminalitet, y = pred)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm", se = FALSE)
kom_pred2  %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - (SSres/SStot))
kom_s  %>%
mutate(pred = predict(step_mod) - voldskriminalitet) %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - (SSres/SStot))
kom_s  %>%
mutate(pred = predict(step_mod),
residual = pred - voldskriminalitet) %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - (SSres/SStot))
kom_pred2  %>%
mutate(pred = predict(step_mod, newdata = .),
residual = pred - voldskriminalitet) %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - (SSres/SStot))
kom_pred2  %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - (SSres/SStot))
kom_pred2 <- kom_pred2 %>%
filter( abs(pred) < 30)
ggplot(kom_pred2, aes(x = voldskriminalitet, y = pred)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm", se = FALSE)
kom_pred2  %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - (SSres/SStot))
kom_pred2 <- kom_pred2 %>%
filter( abs(pred) < 25)
ggplot(kom_pred2, aes(x = voldskriminalitet, y = pred)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm", se = FALSE)
kom_pred2  %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - (SSres/SStot))
kom_pred2 <- kom_pred2 %>%
filter( abs(pred) < 20)
ggplot(kom_pred2, aes(x = voldskriminalitet, y = pred)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm", se = FALSE)
kom_pred2  %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - (SSres/SStot))
kom_pred2 <- kom_pred2 %>%
filter( abs(pred) < 15)
ggplot(kom_pred2, aes(x = voldskriminalitet, y = pred)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm", se = FALSE)
kom_pred2  %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - (SSres/SStot))
kom_pred3 <- kommune_test %>%
mutate(pred = predict(full_mod, newdata = .),
residual = pred - voldskriminalitet)
ggplot(kom_pred3, aes(x = voldskriminalitet, y = pred)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm", se = FALSE)
kom_pred3  %>%
mutate(residual_total = voldskriminalitet - mean(voldskriminalitet)) %>%
summarise(SSres = sum(residual^2),
SStot = sum(residual_total^2)) %>%
mutate(r_squared = 1 - (SSres/SStot))
summary(full_mod)$r.squared
kom_pred3 %>%
mutate(sq.resid = residual^2) %>%
summarise(sqrt(mean(sq.resid)))
library(AUC)
#| code-fold: false
#| echo: false
#| eval: false
library(tidyverse)
library(skimr)
library(randomForest)
library(caret)
library(AUC)
#| code-fold: false
#| echo: false
#| eval: false
library(tidyverse)
library(skimr)
library(randomForest)
library(caret)
library(AUC)
#| code-fold: false
#| echo: false
#| eval: false
library(tidyverse)
library(skimr)
library(randomForest)
library(caret)
library(AUC)
library(fairness)
citation("fairness")
list.of.packages <-
c("tidyverse", "lubridate",
"data.table" ,
"arrow", "qs",
"cutpointr",
"extrafont",
"sjlabelled", "labelled", "haven", "sjmisc",
"forcats",
"skimr",
"memisc",
"openxlsx", "xlsx",
"log4r",
# graphics
"ggplot2", "ggmap",
"gganimate", "gifski", "ggforce",
"animation",
"ggpubr",
"ggROC",
"RColorBrewer", "ggthemes", "magick",
# Maps and GIS
#"leaflet",
"sf",
"rsample",
"mosaic", "arsenal",
#"rattle",
"pROC", "reportROC",
"dendextend", "directlabels",
#"foreign",
"htmltools",
## Network
"igraph", #"threejs",
"statnet", "intergraph",
# output / tables
"kableExtra","stargazer", "tables",
"corrplot",
#"arsenal",
#"radix",    #markdowngreier
"bookdown", "tinytex",
"gt", "gtsummary",
"flextable",
### GIS / spatial
#"osmar", "sp","OpenStreetMap", "splancs","spdep","lgcp",
# "gridExtra", "SPODT","SDMTools",
# "classInt",
#"rgdal","maptools",
#"cshapes","fields",
"spatstat","rgeos","raster",
"sf",
## Regression modeling
"mgcv","plm","pglm",
"survminer", "survival",
"AUC",
#"sqldf",
# "XLConnect","XLConnectJars",
#"zoo", "Zelig",
# import
#"xlsx" ,"openxlsx" ,
#"readstata13",
# "forecast",
#  "XML",
# "Matrix",
# "Grid2Polygons",
#"tabulizer",
"equamatic",
## Machine learning
"randomForest",
"caret",
"adabag", "gbm",
"rpart", "rpart.plot", "pdp",
#"RANN",
"fairmodels", "fairness",
# pedagogisk
"gradethis", "learnr",
## Diverse
#"httr", "caTools", "bitops", "knitr",
#"downloadr",
"caTools",
"rlang", "plogr",
"DescTools", #"reshape", "tables",
#"PresenceAbsence", "ROCR",
"devtools",
"V8",
#"tableone",
#"plotROC",
#"praise",
#"PxWebApiData" , "rjstat" , # SSB-API
"synthpop",
#"gtools", "scholar",
#"swirl", "swirlify",
#"arsenal", "flextable", "officer",
"bookdown",
## Annet
"gapminder",
"nettskjemar",
"norgeo"
)
if(length(new.packages)) install.packages(new.packages)
#install.packages("animation")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages(.Library)[,"Package"])]
new.packages[order(new.packages)]
if(length(new.packages)) install.packages(new.packages)
list.of.packages <-
c("tidyverse", "lubridate",
"data.table" ,
"arrow", "qs",
"cutpointr",
"extrafont",
"sjlabelled", "labelled", "haven", "sjmisc",
"forcats",
"skimr",
"memisc",
"openxlsx", "xlsx",
"log4r",
# graphics
"ggplot2", "ggmap",
"gganimate", "gifski", "ggforce",
"animation",
"ggpubr",
"ggROC",
"RColorBrewer", "ggthemes", "magick",
# Maps and GIS
#"leaflet",
"sf",
"rsample",
"mosaic", "arsenal",
#"rattle",
"pROC", "reportROC",
"dendextend", "directlabels",
#"foreign",
"htmltools",
## Network
"igraph", #"threejs",
"statnet", "intergraph",
# output / tables
"kableExtra","stargazer", "tables",
"corrplot",
#"arsenal",
#"radix",    #markdowngreier
"bookdown", "tinytex",
"gt", "gtsummary",
"flextable",
### GIS / spatial
#"osmar", "sp","OpenStreetMap", "splancs","spdep","lgcp",
# "gridExtra", "SPODT","SDMTools",
# "classInt",
#"rgdal","maptools",
#"cshapes","fields",
"spatstat","rgeos","raster",
"sf",
## Regression modeling
"mgcv","plm","pglm",
"survminer", "survival",
"AUC",
#"sqldf",
# "XLConnect","XLConnectJars",
#"zoo", "Zelig",
# import
#"xlsx" ,"openxlsx" ,
#"readstata13",
# "forecast",
#  "XML",
# "Matrix",
# "Grid2Polygons",
#"tabulizer",
"equatiomatic",
## Machine learning
"randomForest",
"caret",
"adabag", "gbm",
"rpart", "rpart.plot", "pdp",
#"RANN",
"fairmodels", "fairness",
# pedagogisk
"gradethis", "learnr",
## Diverse
#"httr", "caTools", "bitops", "knitr",
#"downloadr",
"caTools",
"rlang", "plogr",
"DescTools", #"reshape", "tables",
#"PresenceAbsence", "ROCR",
"devtools",
"V8",
#"tableone",
#"plotROC",
#"praise",
#"PxWebApiData" , "rjstat" , # SSB-API
"synthpop",
#"gtools", "scholar",
#"swirl", "swirlify",
#"arsenal", "flextable", "officer",
"bookdown",
## Annet
"gapminder",
"nettskjemar",
"norgeo"
)
#install.packages("animation")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages(.Library)[,"Package"])]
new.packages[order(new.packages)]
if(length(new.packages)) install.packages(new.packages)
Sys.setlocale(locale='no_NB.utf8')
#| eval: true
#| code-fold: false
#| echo: true
#| warning: false
#| message: false
library(tidyverse)   # datahåndtering, grafikk og glimpse()
library(skimr)       # funksjonen skim() for å se på data
library(rsample)     # for å dele data i training og testing
library(AUC)         # For å beregne ROC-curve og AUC
