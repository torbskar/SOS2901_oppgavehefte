library(tidyverse)
library(fairness)
library(rsample)
library(caret)
credit <- read.csv("data/credit.csv", stringsAsFactors = TRUE)
glimpse(credit)
credit_split <- initial_split(credit)
credit_train <- training(credit_split)
credit_test  <- testing(credit_split)
dim(credit_train)
est_multlogit <- glm(default ~ ., data = credit_train, family = "binomial")
summary(est_multlogit)
nrow(credit_train)
glimpse(credit_train)
levels(credit_train$default)
credit_train <- credit_train %>%
mutate( default = as.numeric(default == "yes"))
head(credit_train)
glimpse(credit_train)
est_multlogit <- glm(default ~ ., data = credit_train, family = "binomial")
summary(est_multlogit)
credit_train_p <- credit_train %>%
group_by(age) %>%
summarise(default = mean(default == 1))
ggplot(credit_train_p, aes(x = age, y = Attrition))+
geom_point()
ggplot(credit_train_p, aes(x = age, y = default))+
geom_point()
credit_train_p <- credit_train %>%
group_by(amount) %>%
summarise(default = mean(default == 1))
ggplot(credit_train_p, aes(x = credit_train_p, y = default))+
geom_point()
ggplot(credit_train_p, aes(x = amount, y = default))+
geom_point()
ggplot(credit_train_p, aes(x = amount, y = default))+
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial"))
credit_train_p <- credit_train %>%
group_by(amount) %>%
summarise(default = mean(default == 1))
credit_train_p
ggplot(credit_train_p, aes(x = amount, y = default))+
geom_point()
credit_train_p <- credit_train %>%
mutate(amount_int = cut(amount, breaks = 10)) %>%
group_by(amount_int) %>%
summarise(default = mean(default == 1))
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial"))
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial"))
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth(method = "lm", method.args = list(family = "binomial"))
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth()
?cut
credit_train_p <- credit_train %>%
mutate(amount_int = cut(amount, breaks = 10, labels = F)) %>%
group_by(amount_int) %>%
summarise(default = mean(default == 1))
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_point()
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth()
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial"))
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial", se = F))
credit_train_p <- credit_train %>%
mutate(amount_int = cut(amount, breaks = 100, labels = F)) %>%
group_by(amount_int) %>%
summarise(default = mean(default == 1))
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial", se = F))
credit_train_p <- credit_train %>%
mutate(amount_int = cut(amount, breaks = 50, labels = F)) %>%
group_by(amount_int) %>%
summarise(default = mean(default == 1))
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial", se = F))
credit_train_p <- credit_train %>%
mutate(amount_int = cut(amount, breaks = 30, labels = F)) %>%
group_by(amount_int) %>%
summarise(default = mean(default == 1))
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial", se = F))
credit_train_p <- credit_train %>%
mutate(amount_int = cut(amount, breaks = 20, labels = F)) %>%
group_by(amount_int) %>%
summarise(default = mean(default == 1))
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial", se = F))
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth(method = "lm", se = F)
credit_train_p <- credit_train %>%
mutate(amount_int = cut(amount, breaks = 20, labels = F)) %>%
group_by(amount_int) %>%
summarise(default = mean(default == 1))
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth(method = "lm", se = F)
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth(se = F)
credit_train <- credit_train %>%
mutate( default = as.numeric(default == "yes"))
glimpse(credit_train)
credit_train <- training(credit_split)
credit_test  <- testing(credit_split)
nrow(credit_train)
levels(credit_train$default)
#| echo: false
#| warning: false
#| message: false
credit_train <- credit_train %>%
mutate( default = as.numeric(default == "yes"))
glimpse(credit_train)
#| echo: false
#| warning: false
#| message: false
credit_train_p <- credit_train %>%
mutate(amount_int = cut(amount, breaks = 20, labels = F)) %>%
group_by(amount_int) %>%
summarise(default = mean(default == 1))
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth(se = F)
credit_train2 <- credit_train %>%
mutate(prob = predict(est_multlogit, type = "response")) %>%
mutate(default_class = as.factor(ifelse(prob < .5, "No", "Yes")))
cm <- confusionMatrix(credit_train2$default, credit_train2$default_class, positive = "Yes")
cm <- confusionMatrix(credit_train2$default, credit_train2$default_class, positive = 1)
cm <- confusionMatrix(credit_train2$default, credit_train2$default_class, positive = "1")
credit_train2 <- credit_train %>%
mutate(prob = predict(est_multlogit, type = "response")) %>%
mutate(default_class = (ifelse(prob < .5, "No", "Yes")))
cm <- confusionMatrix(credit_train2$default, credit_train2$default_class, positive = "1")
credit_train
glimpse(credit_train2)
est_multlogit <- glm(default ~ ., data = credit_train, family = "binomial")
summary(est_multlogit)
est_multlogit <- glm(default ~ ., data = credit_train, family = "binomial")
est_multlogit <- glm(default ~ ., data = credit_train, family = "binomial")
?glm
levels(credit_train$default)
credit_train <- training(credit_split)
levels(credit_train$default)
relevel(credit_train$default, ref = "no")
levels(credit$default)
credit <- credit %>%
mutate(default = relevel(default, ref = "no"))
relevel(credit$default, ref = "no")
levels(credit$default)
est_multlogit <- glm( relevel(default, ref = "no") ~ ., data = credit_train, family = "binomial")
summary(est_multlogit)
est_multlogit <- glm( default ~ ., data = credit_train, family = "binomial")
summary(est_multlogit)
est_multlogit <- glm( default ~ ., data = credit_train, family = "binomial")
summary(est_multlogit)
est_multlogit <- glm( relevel(default, ref = "yes") ~ ., data = credit_train, family = "binomial")
summary(est_multlogit)
test <- glm( default ~ amount, data = credit, family = "binomial")
summary(est_multlogit)
summary(test)
credit <- read.csv("data/credit.csv", stringsAsFactors = TRUE)
levels(credit$default)
test <- glm( default ~ amount, data = credit, family = "binomial")
summary(test)
credit <- credit %>%
mutate(default = relevel(default, ref = "no"))
test <- glm( default ~ amount, data = credit, family = "binomial")
summary(test)
levels(credit$default)
credit <- credit %>%
mutate(default = as.numeric(default == "yes"))
Logistisk regresjon med `glm` når utfallet er en factor-variabel bruker den første kategorien som ønsket utfall (ofte omtalt som "failure" i metodelitteraturen). Vi kan se hvilken kategori som er referansekategori ved å bruke `levels`-funksjonen. Det spiller ingen rolle for estimeringen hvilken kategori som er referansekategori, men det spiller en rolle for tolkningen om man predikerer "1" eller "0". Selv om det er helt ok å bruke en factor-variabel som utfallsvariabel, så er det litt lettere å ikke gå surr i tolkningen hvis det er en binær variabel med 0 og 1.
credit <- credit %>%
mutate(default = as.numeric(default == "yes"))
glimpse(credit)
table(credit$default)
credit <- read.csv("data/credit.csv", stringsAsFactors = TRUE)
credit <- credit %>%
mutate(default = as.numeric(default == "yes"))
table(credit$default)
set.seed(426)
credit_split <- initial_split(credit)
credit_train <- training(credit_split)
credit_test  <- testing(credit_split)
nrow(credit_train)
credit_train_p <- credit_train %>%
mutate(amount_int = cut(amount, breaks = 20, labels = F)) %>%
group_by(amount_int) %>%
summarise(default = mean(default == 1))
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth(se = F)
#| echo: false
#| warning: false
#| message: false
credit_train_p <- credit_train %>%
mutate(amount_int = cut(amount, breaks = 25, labels = F)) %>%
group_by(amount_int) %>%
summarise(default = mean(default == 1))
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth(se = F)
#| echo: false
#| warning: false
#| message: false
credit_train_p <- credit_train %>%
mutate(amount_int = cut(amount, breaks = 30, labels = F)) %>%
group_by(amount_int) %>%
summarise(default = mean(default == 1))
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth(se = F)
#| echo: false
#| warning: false
#| message: false
credit_train_p <- credit_train %>%
mutate(amount_int = cut(amount, breaks = 50, labels = F)) %>%
group_by(amount_int) %>%
summarise(default = mean(default == 1))
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth(se = F)
#| echo: false
#| warning: false
#| message: false
credit_train_p <- credit_train %>%
mutate(amount_int = cut(amount, breaks = 70, labels = F)) %>%
group_by(amount_int) %>%
summarise(default = mean(default == 1))
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth(se = F)
#| echo: false
#| warning: false
#| message: false
credit_train_p <- credit_train %>%
mutate(amount_int = cut(amount, breaks = 100, labels = F)) %>%
group_by(amount_int) %>%
summarise(default = mean(default == 1))
ggplot(credit_train_p, aes(x = amount_int, y = default))+
geom_point() +
geom_smooth(se = F)
est_multlogit <- glm( default ~ ., data = credit_train, family = "binomial")
summary(est_multlogit)
credit_train2 <- credit_train %>%
mutate(prob = predict(est_multlogit, type = "response")) %>%
mutate(default_class = (ifelse(prob < .5, 0, 1)))
cm <- confusionMatrix(credit_train2$default, credit_train2$default_class, positive = "1")
cm
credit_train2 <- credit_train %>%
mutate(prob = predict(est_multlogit, type = "response")) %>%
mutate(default_class = (ifelse(prob < .5, 0, 1)))
glimpse(credit_train2)
cm <- confusionMatrix(credit_train2$default, credit_train2$default_class, positive = 1)
cm <- confusionMatrix(credit_train2$default, credit_train2$default_class)
cm <- table(credit_train2$default, credit_train2$default_class)
cm
confusionMatrix(cm)
credit_train2 %>%
select(default, default_class) %>%
table()
cm
cm <- credit_train2 %>%
select(default, default_class) %>%
table()
confusionMatrix(cm)
credit_train2 <- credit_train %>%
mutate(prob = predict(est_multlogit, type = "response")) %>%
mutate(default_class = (ifelse(prob < .5, 0, 1)))
credit_train2
credit_train2 <- credit_train %>%
mutate(prob = predict(est_multlogit, type = "response")) %>%
mutate(default_class = (ifelse(prob < .5, 0, 1)))
?confusionMatrix
468/(468+115)
confusionMatrix(cm, positive = "1")
confusionMatrix(cm, positive = "0")
cm
confusionMatrix(cm, positive = "1")
114/(114+53)
cm
credit_train2 <- credit_train %>%
mutate(prob = predict(est_multlogit, type = "response")) %>%
mutate(default_pred = (ifelse(prob < .5, 0, 1)))
cm <- credit_train2 %>%
select(default, default_class) %>%
table()
credit_train2 <- credit_train %>%
mutate(prob = predict(est_multlogit, type = "response")) %>%
mutate(default_pred = (ifelse(prob < .5, 0, 1)))
cm <- credit_train2 %>%
select(default, default_class) %>%
table()
cm <- credit_train2 %>%
select(default, default_class)
cm <- credit_train2 %>%
select(default, default_pred) %>%
table()
cm
cm <- credit_train2 %>%
select(default_pred, default) %>%
table()
cm
confusionMatrix(cm, positive = "1")
cm
confusionMatrix(cm, positive = "1")
114/(114+115)
confusionMatrix(cm, positive = "1")
invisible(Sys.setlocale(locale='no_NB.utf8'))
library(tidyverse)   # datahåndtering, grafikk og glimpse()
library(skimr)       # funksjonen skim() for å se på data
library(rsample)     # for å dele data i training og testing
library(pROC)        # Beregne ROC-curve
library(gtsummary)   # Pent formatert regresjonstabell
library(caret)       # Funksjonen confusionMatrix()
attrition <- readRDS("data/attrition.rds")
data.frame(lopenr = 1:10, lopnaam = letters[1:10])
data.frame(lopenr = 1001:1010)
library(tidyverse)
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010) %>%
expand(lopenr, 1:5)
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010) %>%
expand(lopenr, year=1:5)
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010) %>%
expand(lopenr, year=2015:2019)
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010) %>%
expand(lopenr, year=2015:2019) %>%
View()
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010,
utd = c(a:e)) %>%
expand(lopenr, year=2015:2019) %>%
View()
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010,
utd = c("a":"e")) %>%
expand(lopenr, year=2015:2019) %>%
View()
letters[1]
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010,
utd = letters[1:10]) %>%
expand(lopenr, year=2015:2019) %>%
View()
data.frame(lopenr = 1001:1010,
utd = letters[1:10])
data.frame(lopenr = 1001:1010,
utd = letters[1:10]) %>%
expand(lopenr, year=2015:2019)
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010,
utd = letters[1:10]) %>%
expand(lopenr, nesting(year=2015:2019))
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010,
utd = letters[1:10]) %>%
expand( nesting(lopenr), year=2015:2019)
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010,
utd = letters[1:10]) %>%
complete( nesting(lopenr), year=2015:2019)
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010,
utd = letters[1:10]) %>%
complete( lopenr, year=2015:2019)
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010,
utd = letters[1:10]) %>%
complete( nesting(lopenr, year=2015:2019))
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010,
utd = letters[1:10]) %>%
group_by(lopenr) %>%
complete( nesting(year=2015:2019))
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010,
utd = letters[1:10]) %>%
group_by(lopenr) %>%
complete( year=2015:2019)
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010,
utd = letters[1:10])
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010,
utd = letters[1:10]) %>%
group_by(lopenr)
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010,
utd = letters[1:10]) %>%
group_by(lopenr) %>%
expand( year=2015:2019)
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010,
utd = letters[1:10]) %>%
group_by(lopenr) %>%
expand( nesting(., year=2015:2019))
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010,
utd = letters[1:10]) %>%
group_by(lopenr) %>%
expand( nesting(lopenr, year=2015:2019))
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010,
utd = letters[1:10]) %>%
group_by(lopenr) %>%
expand( lopenr, year=2015:2019)
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010,
utd = letters[1:10]) %>%
group_by(lopenr) %>%
expand( year=2015:2019)
data.frame(lopenr = 1001:1010,
utd = letters[1:10]) %>%
group_by()
data.frame(lopenr = 1001:1010,
utd = letters[1:10]) %>%
group_by() %>%
expand( year=2015:2019)
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010,
utd = letters[1:10]) %>%
group_by( across(everything()))
# create dataset. Expand to multiple rows per person
data.frame(lopenr = 1001:1010,
utd = letters[1:10]) %>%
group_by( across(everything())) %>%
expand( year=2015:2019)
rep(1:2, 5)
data.frame(lopenr = 1001:1010,
utd = letters[1:10],
kjonn = rep(1:2, 5))
data.frame(lopenr = 1001:1010,
utd = letters[1:10],
kjonn = rep(1:2, 5)) %>%
group_by( across(everything())) %>%
expand( year=2015:2019)
library(tidyverse)   # datahåndtering, grafikk og glimpse()
library(rsample)     # for å dele data i training og testing
library(gbm)         # Funksjoner for boosting
library(caret)       # For funksjonen confusionMatrix()
library(fairness)    # For fairnessmetrics
library(gtsummary)   # For å lage litt penere tabeller
compas <- readRDS("../data/compas.rds") %>%
mutate(Two_yr_Recidivism = ifelse(Two_yr_Recidivism == "1", 1, 0)) %>%
na.omit()
set.seed(42)
training_init <- initial_split(compas)
training <- training(training_init)
testing  <- testing(training_init)
gradboost0 <- gbm(Two_yr_Recidivism ~ .,
data = training,
distribution = "bernoulli")
gradboost0
set.seed(542)
gradboost0 <- gbm(Two_yr_Recidivism ~ .,
data = training,
distribution = "bernoulli")
gradboost0
set.seed(542)
gradboost1 <- gbm(formula = Two_yr_Recidivism ~ .,
data = training,
distribution = "bernoulli",
n.trees = 4000,
interaction.depth = 3,
n.minobsinnode = 1,
shrinkage = 0.001,
bag.fraction = 0.5)
gradboost1
?gbm
gradboost0 <- gbm(Two_yr_Recidivism ~ .,
data = training)
gradboost0
summary(gradboost0)
gradboost0
gbm(Two_yr_Recidivism ~ .,
data = training)
sumboost <- summary(gradboost1, method = permutation.test.gbm, normalize = T,
plotit = F)
sumboost
ggplot(sumboost, aes(x = reorder(var, rel.inf), y = rel.inf)) +
geom_col()+
ylab("Relative influence")+
xlab("")+
coord_flip()
plot(gradboost1)
plot(gradboost1, i = "Number_of_Priors")
plot(gradboost1, "Number_of_Priors", type = "response")
plot(gradboost1, "Age_Below_TwentyFive", type = "response")
plot(gradboost1, "Ethnicity", type = "response")
plot(gradboost1, "Misdemeanor", type = "response")
