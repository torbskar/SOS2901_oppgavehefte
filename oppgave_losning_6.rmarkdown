---
title: "Bagging og random forest"
author: "Torbjørn Skardhamar"
editor: visual
---

```{r}
#| warning: false
#| message: false
#| echo: false
invisible(Sys.setlocale(locale='no_NB.utf8'))
```




# Oppgaver om bagging og random forest.


```{r}
#| warning: false
#| message: false
library(tidyverse)   # datahåndtering, grafikk og glimpse()
library(skimr)       # funksjonen skim() for å se på data
library(rsample)     # for å dele data i training og testing
library(rpart)       # klassifikasjons trær
library(rpart.plot)  # funksjon for å plotte CART 
library(ipred)       # bagged decision trees
library(e1071)       # variable importance
library(caret)       # confusionMatrix()

library(randomForest) # for fitting random forests
library(fairness)   # for calculating fairness metrics
```


Bruk datasett fra [Iowa prison study](https://torbskar.github.io/SOS2901_oppgavehefte/datasets.html#recidivism-from-iowa-prisons).

## Oppgave 1

Tenk deg at du skal sette i verk et tiltak for å redusere tilbakefall til ny kriminalitet etter løslatelse fra fengsel. Det er opp til deg å vurdere hvordan tiltaket skal utformes, men du har ressurser til å implementere tiltaket for 20 % av de innsatte. Noe målretting må derfor til og du må bruke ressursene godt. Tiltaket skal rettes mot de som har høyest risiko for tilbakefall og det skal brukes en prediksjonsmodell for å gi en bedre risikovurdering.

-   Hvilke vurderinger bør du nå gjøre for å velge hvem som skal motta tiltaket?\
-   Hvilke krav vil du stille til modellen og hva bør du sjekke?

## Oppgave 2

Lag en modell for å predikere om en innsatt vil begå ny kriminalitet innen tre år etter løslatelse. Lag et training og testing datasett, og bruk set.seed(42) slik at du kan replikere resultatet. Bruk først et enkelt klassifikasjonstre og deretter med bagging. Sammenlign resultatene.

-   Juster modellene slik du selv ønsker.
-   Prediker og sjekk resultatet med confusion matrix for begge modellene.
-   Hvilken modell gir best resultat på testing datasettet?
-   Er det noe bias i modellene? Noen tegn til systematisk forskjellsbehandling?

## Oppgave 3

Gjør nå det samme med random forest.



# Løsningsforslag
<details>

Les inn dataene. Her har jeg også lagt til en funksjon for å rydde opp i variabelnavnene. Det er litt surrete i dette datasettet. Sjekk frekvenser for noen variable. Det er bl.a. litt vel mange kategorier for etnisitet. Her bruker jeg `str_detect()` til å lage en kategori for hvit og ikke-hvit. Er da et poeng å etterpå slette opprinnelig variabel med `select()`. Merk at residiv-variabelen er numerisk. Det er fint for noen teknikker, men her trenger vi en kategorisk variabel, så vi gjør om den.

Vurder evt. om du trenger rydde i flere variable også.


```{r}
#| warning: false
#| message: false
recidivism <- read.csv("data/3-Year_Recidivism_for_Offenders_Released_from_Prison_in_Iowa_elaborated.csv", stringsAsFactors = TRUE) %>% 
  janitor::clean_names() %>% 
  mutate(ethnicity = case_when(str_detect(race_ethnicity, "White") ~ "White", 
                               str_detect(race_ethnicity, "Black") ~ "Black", 
                               TRUE ~ "Other"), 
         recidivism_return_to_prison = factor(recidivism_return_to_prison_numeric)) %>% 
  select(-race_ethnicity, -recidivism_return_to_prison_numeric)

glimpse(recidivism)


```


## Oppgave 1.

Det er flere ting som er naturlig å vurdere.

-   Hvilke konsekvenser kan tiltaket tenkes å ha? Både tilsiktede og utilsiktede. Dette har betydning for hvilke feilrater du vil godta.
-   Modellen bør ha god nok prediksjonskraft, og det kan måles på ulike måter. Her kan du velge hva du synes er viktigst, herunder feilrater. Du bør også planlegge å sjekke om modellen slår ut forskjellig for undergrupper, dvs. sjekke noen fairness-mål.
-   I forlengelsen av ovenstående: Kanskje du også skal vurdere hva som skal til for å forkaste hele planen? Eller er du villig til å jenke på kravene etterpå?
-   Er det noen variable du ikke bør ha med i modellen? Det kommer an på tiltaket. Hvis tiltaket skal være før løslatelse vil det jo ikke være aktuelt å ha med variabler om løslatelsetype...

## Oppgave 2.

Splitter først datasettet:


```{r}
#| warning: false
#| message: false
set.seed(42)
training_init <- initial_split(recidivism)

training <- training(training_init)
testing  <- testing(training_init)
```


### Klassifikasjonstre

Prøv deg litt frem med ulike parametre. Her er et eksempel.


```{r}
#| warning: false
#| message: false
enkelttre <- rpart(recidivism_return_to_prison ~ ., 
                     data=training, method="class", minbucket=100, cp=0.001, maxdepth=6)

rpart.plot(enkelttre)
```


Sjekk resultatet


```{r}
#| warning: false
#| message: false
testing_pred <- testing %>% 
  mutate(recidivism_pred = predict(enkelttre, newdata=testing, type="class"))


tab <- testing_pred %>% 
  select(recidivism_pred, recidivism_return_to_prison) %>% 
  table()

confusionMatrix(tab)


```


Sjekk fairness. Her er det jo en vurdering hvilke mål som er rimelig å bruke. Husk at det er en trade-off mellom ulike mål. Ikke sikkert modellen ser like fin ut på alle.


```{r}
#| warning: false
#| message: false
pred_rate_parity(data = testing_pred,
                 outcome = "recidivism_return_to_prison", 
                 group = "ethnicity", 
                 preds = "recidivism_pred"
                 )$Metric_plot
```


Men så er spørsmålet: Er dette rettferdig nok?? Tja. Det er jo en vurderingssak. Gå evt. tilbake og gjør nye justeringer av klassifiseringstreet.

### Bagging


```{r}
#| warning: false
#| message: false
set.seed(42)
baggedtree <- bagging(recidivism_return_to_prison ~ . , data = recidivism, nbagg = 100)

# Alternativt: mer komplisert modell som tar lengre tid... 
# baggedtree <- bagging(recidivism_return_to_prison ~ . , data = recidivism, nbagg = 500, 
#                       control = rpart.control(maxdepth = 6, cp = 0.0001))

```

```{r}
#| warning: false
#| message: false
testing_bag <- testing %>% 
  mutate(recidivism_pred = predict(baggedtree, newdata=testing, type="class"))

glimpse(testing_bag)


tab <- testing_bag %>% 
  select(recidivism_pred, recidivism_return_to_prison) %>% 
  table()

confusionMatrix(tab)
```

```{r}
#| warning: false
#| message: false
pred_rate_parity(data = testing_bag,
                 outcome = "recidivism_return_to_prison", 
                 group = "ethnicity", 
                 preds = "recidivism_pred"
                 )
```



## Oppgave 3
Random forest bruker i utgangspunktet 500 trær og du kan evt. redusere antall trær for å få det til å gå raskere, men sjekk om det er nok.


```{r}
#| warning: false
#| message: false
set.seed(42)
randfor <- randomForest(recidivism_return_to_prison ~ . , data = recidivism, 
                        ntree = 150, 
                        sampsize = c(400, 500)) 

plot(randfor)

```

```{r}
#| warning: false
#| message: false
testing_rf <- testing %>% 
  mutate(recidivism_pred = predict(randfor, newdata=testing, type="class"))



tab <- testing_bag %>% 
  select(recidivism_pred, recidivism_return_to_prison) %>% 
  table()

confusionMatrix(tab)
```

```{r}
#| warning: false
#| message: false
pred_rate_parity(data = testing_rf,
                 outcome = "recidivism_return_to_prison", 
                 group = "ethnicity", 
                 preds = "recidivism_pred"
                 )
```


</details>
